{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Praktische Einheit\n",
    "\n",
    "Die folgenden Aufgaben sind zur praktischen Übung gedacht. Sie sind in drei Schwierigkeitsgrade gruppiert: **Basic, Intermediate, Advanced**. Schätze dein Können selber ein und beginne mit Aufgaben, die dich ausreichend fordern. Falls du mal nicht weiter weist, versuche:\n",
    "\n",
    "1.   in den vorherigen Einheiten nach anwendbaren Beispielen zu suchen und diese umzuschreiben\n",
    "2.   die Dokumentation der Funktionen und Klassen zu lesen\n",
    "3.   nach Lösungen im Internet zu suchen\n",
    "4.   Komilitonen zu fragen\n",
    "5.   den Tutor zu fragen\n",
    "\n",
    "Das Lösen der Aufgaben ist **nicht bestandteil der Prüfungsleistung**. Also kein Grund zur Panik oder zum Abschreiben. Ihr bekommt Musterlösungen zu Beginn der nächsten Veranstaltung."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from myturtle import Turtle\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "# Level: Basic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 1:** Zeichen eine einzelne Treppenstufe mit Hilfe von `Turtle`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 2:** Verpacke das Zeichnen einer Treppenstufe in einer Funktion. Dabei soll das erste Argument das `Turtle` Objekt sein. Zwei weitere optionale Argumente sollen die Breite und die Höhe der Treppenstufe sein, beides mit 1 als Standardwert.\n",
    "\n",
    "Zeichne dann eine Treppe mit drei Stufen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 3:** Schreibe nun eine Funktion, welche eine Treppe (mehrere Stufen hintereinander) zeichnet. Die Funktion soll in der Lage sein, beliebig lange Treppen zu zeichnen. Greife dabei auf Code zurück, den du bereits programmiert hast."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 4:** Modifiziere deinen Code so, dass du ein Treppenhaus zeichnen kannst, also mehrere gegenläufige Treppen hintereinander. Schreibe eine weitere Funktion, welche ein Haus zeichnet. Zeichne ein Haus mit einem dreistöckigen Treppenhaus."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "# Level: Intermediate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 1:** Schreibe eine Funktion, welche den Betrag der Gravitationbeschleunigung durch einen Körper der Masse `M` berechnet. Die Gravitationsbeschleunigung ist gegeben durch:\n",
    "\n",
    "$$ a = \\frac{\\Gamma M}{r^2} $$\n",
    "\n",
    "mit $\\Gamma = 6,672 \\cdot 10^{-11} m^3 kg^{-1} s^{-2}$ und $r$ ist der Abstand der beiden Massenpunkte."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 2:** Schreibe die Funktion so um, dass sie die Gravitationsbeschleunigung\n",
    "\n",
    "$$ \\vec{a} = \\frac{\\Gamma M}{\\Vert\\vec{r}\\Vert^2}\\frac{\\vec{r}}{\\Vert\\vec{r}\\Vert}$$\n",
    "\n",
    "zurück gibt. Verwende dabei Numpy Funktionen und schreibe die Funktion so, dass sie sowohl in 2D als auch in 3D funktioniert."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 3:** Schreibe ein Programm, dass den Flug einer Kanonenkugel simuliert. Du kannst (musst aber nicht) eine konstante Gravitationsbeschleunigung von $g = 9.80665 ms^{-2}$ annehmen.\n",
    "\n",
    "Parameter für die Berechnung sind:\n",
    "\n",
    "-   Startgeschwindigkeit und Winkel. Am besten beides in einen Vektor zusammen fassen.\n",
    "-   Zeitinkrement $dt$ der Simulation. Benutze $dt = 0.1s$\n",
    "\n",
    "Berechne die Änderung der Geschwindigkeit zu jedem Zeitinkrement $n$, mit $t = n\\cdot dt$, näherungsweise durch\n",
    "\n",
    "$$ \\vec{v}_{n+1} = \\vec{v}_n + dt\\cdot\\vec{g}$$\n",
    "\n",
    "Dann ist die Änderung der Position gegeben durch\n",
    "\n",
    "$$ d\\vec{r}_{n+1} = dt\\cdot\\vec{v}_{n+1}$$\n",
    "\n",
    "Verwende die Methode `move` von `Turtle` um die Position zu verändern. Die aktuelle Position erhälst du über das Attribut `position`.\n",
    "\n",
    "Beginne zuerst mit einem `for`-loop mit 20 Iterationsschritten. Wenn du das Gefühl hast, dass das Ergebnis stimmt, schreibe das Programm um, so das es abbricht, wenn die Kanonenkugel den Boden berührt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 4:** Verpacke das Programm der vorherigen Aufgabe in eine Funktion mit den Argumenten\n",
    "\n",
    "-   `Turtle` Objekt\n",
    "-   Startgeschwindigkeit\n",
    "-   Abschusswinkel\n",
    "-   Zeitinkrement (Standardwert 0.1s) (Bestimmt die Genauigkeit der Distanzmessung)\n",
    "\n",
    "Schreibe ein Programm, dass die Schussweite in Abhängigkeit vom Abschusswinkel und der Abschussgeschwindigkeit bestimmt. Verwende dabei Abschusswinkel zwischen 10° und 70° in 1° Schritten und Abschussgeschwindigkeiten zwischen 50 $ms^{-1}$ und 200 $ms^{-1}$ in 10 $ms^{1}$ Schritten. Organisiere das Ergebnis in einem 2D Array.\n",
    "\n",
    "Die beiden folgenden Zellen enthalten Code, um das Ergebis darzustellen.\n",
    "\n",
    "Tip: Schalte den graphischen Output von `Turtle` mit der Methode `set_draw` aus. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# speed: Vektor mit Geschwindigkeiten\n",
    "# angle: Vektor mit Winkeln\n",
    "# distance: 2D Array mit Schussweiten (shape: n_angle x n_speed) \n",
    "\n",
    "plt.contourf(speed, angle, distance)\n",
    "plt.colorbar()\n",
    "plt.ylabel('angle [°]')\n",
    "plt.xlabel('speed [m/s]')\n",
    "plt.title('Shooting distance [m]');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(angle, distance[:, -1])\n",
    "plt.ylabel('shooting distance [m]')\n",
    "plt.xlabel('angle [°]')\n",
    "plt.title('Speed {} [m/s]'.format(speed[-1]));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "# Level: Advanced"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 1:** Erweitere die Klasse `Turtle` um die Funktionalität der *Basic level* Aufgaben. D.h., Objekte der Klasse sollen Häuser und Treppenhäuser zeichnen können.\n",
    "\n",
    "Füge zusätzlich eine Methode hinzu, die Häuser mit Treppenhäusern zeichnet. Argument soll die Anzahl der Stockwerke sein.\n",
    "\n",
    "Zeichne eine Stadt (~ 5-10 mehrstöckige Häuser unterschiedlicher Höhe)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Aufgabe 2:**\n",
    "Erweitere die Klasse `Turtle`:\n",
    "-   Ergänze die Attribute Geschwindigkeit (ndarray) und Masse (skalar)\n",
    "-   Ändere zusätzlich den Typen des Attributs `position` zu einem ndarray\n",
    "-   Schreibe eine Methode, welche die Schwerebeschleunigung des Objekts durch ein anderes Objekt des gleichen Typs berechnet (sie *Intermediate level* Aufgabe 2).\n",
    "-   Schreibe eine Methode, welche die Schwerebeschleunigungen durch eine Liste von Objekten aufsummiert.\n",
    "-   Schreibe eine Methode um die Geschwindigkeit zum nächsten Zeitschritt zu berechnen (sie *Intemediate level* Aufgabe 3)\n",
    "-   Schreibe eine Methode um die Position zum nächsten Zeitschritt zu berechnen und zu verändern.\n",
    "\n",
    "Betrachte folgende drei Objekte:\n",
    "-   sun:\n",
    "    -   Position: (0, 0)\n",
    "    -   Geschwindigkeit: (0, 0)\n",
    "    -   Masse: 1.989e30\n",
    "-   earth:\n",
    "    -   Position relativ zu sun: (0, 1.496e11)\n",
    "    -   Geschwindigkeit relativ zu sun: (2.9780e4, 0)\n",
    "    -   Masse: 5.9722e24\n",
    "-   moon:\n",
    "    -   Position relativ zu earth: (0, 3.844e8)\n",
    "    -   Geschwindigkeit relativ zu earth: (1.023e3, 0)\n",
    "    -   Masse: 7.349e22\n",
    "\n",
    "Simuliere zuerst nur den Umlauf des Mondes um die Erde in einem geozentrischen Koordinatensystem. Du kannst die Erde als fix annehmen. Verwende ein Zeitinkrement von $dt = 5000s$ und simuliere 30 Tage.\n",
    "\n",
    "Simuliere nun den Umlauf des Mondes um die Erde, wenn diese sich auch um die Sonne bewegt.\n",
    "\n",
    "Du kannst auch versuchen, einen [\"gravitational slingshot\"](https://en.wikipedia.org/wiki/Gravity_assist) zu simulieren. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py36_std]",
   "language": "python",
   "name": "conda-env-py36_std-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
